class CatmullRom : public Curve {
private:
	std::vector<float> ts;
	std::vector<vec3> cps;

	vec3 Hermite(vec3 p0, vec3 v0, float t0, vec3 p1, vec3 v1, float t1, float t) {
		float t1_ = t - t0;
		float t2 = (t - t0) * (t - t0);
		float t3 = (t - t0) * (t - t0) * (t - t0);
		vec3 a0 = p0;
		vec3 a1 = v0;
		vec3 a2 = (3.0f * (p1 - p0) / ((t1 - t0) * (t1 - t0))) - (2.0f * v0 + v1) / (t1 - t0);
		vec3 a3 = (2.0f * (p0 - p1) / ((t1 - t0) * (t1 - t0) * (t1 - t0))) + (v0 + v1) / ((t1 - t0) * (t1 - t0));

		return a0 + a1 * t1_ + a2 * t2 + a3 * t3;
	}



public:
	float tStart() { return ts[0]; }
	float tEnd() { return ts[wCtrlPoints.size() -1 ]; }

	void AddControlPoint(float cX, float cY) {
		ts.push_back((float)wCtrlPoints.size());
		cps.push_back(vec3(cX, cY, 1));
		Curve::AddControlPoint(cX, cY);
	}

	virtual vec4 r(float t) override {
		for (int i = 0; i < cps.size() - 1; i++) {
			if (ts[i] <= t &&  t <= ts[i + 1]) {
				int startI = i; int endI = i + 1;
				vec3 v0; vec3 v1;

				if (startI == 0) {
					v0 = vec3(0, 0, 0);
					printf("AAAAAAAAAAAAAAAAAAAAAAAA   %d \n", startI);
				}
				else {
					v0 = 0.5 * (1 - tension) * (((cps[startI + 1] - cps[startI]) /
						(ts[startI + 1] - ts[startI])) + (cps[startI] - cps[startI - 1]) / (ts[startI] - ts[startI - 1]));
				}
					
				if (endI == cps.size() -1 ) {
					v1 = vec3(0, 0, 0);
					printf("BBBBBBBBBBBBBBBBBBBBBBBBBB  %d \n", endI);
					
				}
				else {
					v1 = 0.5 * (1 - tension) * (((cps[endI + 1] - cps[endI]) /
						(ts[endI + 1] - ts[endI])) + (cps[endI] - cps[endI - 1]) / (ts[endI] - ts[endI - 1]));
				}

				vec3 temp = Hermite(cps[startI], v0, ts[startI], cps[endI], v1, ts[endI], t);
				return vec4(temp.x, temp.y, temp.z, 1);
			}
		}
		return vec4(0.0f, 0.0f, 0.0f, 1.0f);
	}

};